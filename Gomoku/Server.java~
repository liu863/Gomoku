import java.io.*;
import java.net.*;
import java.util.*;

public class Server {
    private static final int port = 9000;
    public static void main(String[] args) throws Exception {
        ServerSocket serverSocket = new ServerSocket(port);
        while (true) {
            Socket socket = serverSocket.accept();
            Request request = new Request(socket);
            Thread t = new Thread(request);
            t.start();
        }
    }
}

class Request implements Runnable {
    final String CRLF = "\r\n";
    Socket socket;
    
    public Request(Socket socket) throws Exception {
        this.socket = socket;
    }
    
    public void run() {
        try {
            processRequest();
        } catch (Exception e) {
            System.err.println(e);
        }
    }
    
    private void processRequest() throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        DataOutputStream outstream = new DataOutputStream(socket.getOutputStream());
        
        String request = br.readLine();
        System.out.format("%n%s%n", request);
        
        StringTokenizer tokens = new StringTokenizer(request);
        String type = tokens.nextToken();
        String file = tokens.nextToken();
        //System.out.println(type);
        //System.out.println(file);
        //Thread.sleep(3000);
        
        if (type.equals("GET")) {
            System.out.println("get content");
            if (file.length() == 1) file += "index.html";
            file = "." + file;
            System.out.println(file);
            getContent(outstream, file);
        }
        else if (type.equals("POST")) {
            System.out.println("game related");
            file = file.substring(1);
            System.out.println(file);
            gameMove(outstream, file);
        }
        br.close();
    }
    
    private void gameMove(DataOutputStream outstream, String file) throws Exception {
        String response = "";
        if (file.startsWith("move")) {
            file = file.substring(4);
            String[] moves = file.split(",");
            int[] moveIndices = new int[]{Integer.parseInt(moves[0]), Integer.parseInt(moves[1])};
            response += "move" + (moveIndices[0] + 1) + "," + (moveIndices[1] + 1);
        }
        else if (file.startsWith("start")) {
            file = file.substring(5);
            response = "move" + 7 + "," + 7;
        }
        outstream.writeBytes(response);
        outstream.close();
        socket.close();
    }
    
    private void getContent(DataOutputStream outstream, String file) throws Exception {
        FileInputStream fis = null;
        String statusLine = null;
        String contentTypeLine = null;
        String entityBody = null;
        try {
            fis = new FileInputStream(file);
            statusLine = "HTTP/1.1 200 OK" + CRLF;
            contentTypeLine = "Content-type: " + contentType(file) + CRLF;
        } catch (FileNotFoundException e) {
            statusLine = "HTTP/1.1 404 Not Found" + CRLF;
            contentTypeLine = "Content-type: text/plain" + CRLF;
        }
        outstream.writeBytes(statusLine);
        outstream.writeBytes(contentTypeLine);
        outstream.writeBytes(CRLF);
        
        if (fis != null) {
            sendBytes(fis, outstream);
            fis.close();
        }
        
        outstream.close();
        socket.close();
    }
    
    private String contentType(String fileName) {
        if (fileName.endsWith(".htm") || fileName.endsWith(".html")) return "text/html";
        if (fileName.endsWith(".jpg") || fileName.endsWith(".jpeg")) return "text/jpeg";
        if (fileName.endsWith(".png")) return "image/png";
        if (fileName.endsWith(".css")) return "text/css";
        if (fileName.endsWith(".js")) return "text/javascript";
        return "application/octet-stream";
    }
    
    private void sendBytes(FileInputStream fis, OutputStream os) throws Exception {
        byte[] buffer = new byte[1024];
        int bytes = 0;
        while ((bytes = fis.read(buffer)) != -1) {
            os.write(buffer, 0, bytes);
        }
    }
}